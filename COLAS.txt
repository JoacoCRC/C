****************************************CABECERA COLAS ESTATICAS*****************************************************
#define MAX 50

typedef int TElementoC;

typedef struct {
    TElementoC datos[MAX];
    int pri, ult; } TCola;

void IniciaC (TCola * C);

int VaciaC (TCola C);

TElementoC consultaC (TCola C);

void sacaC (TCola *C, TElementoC* x);

void poneC (TCola *C, TElementoC x);

************************************IMPLEMENTACION COLAS ESTATICAS*********************************************************
#include "colas.h"

void IniciaC (TCola *C) {
    (*C).pri=-1;
    (*C).ult=-1;
}

int VaciaC(TCola C){
    return C.pri==-1;
}

void poneC (TCola *C, TElementoC X) {
    if ((*C).ult != MAX-1) {
        if ((*C).pri==-1)
            (*C).pri = 0;
        (*C).datos[++((*C).ult)]=X;
    }
}

void sacaC (TCola *C, TElementoC *X) {
    if ((*C).pri != -1) { // !vaciaC(*C)
        *X = (*C).datos[(*C).pri];
        if ((*C).pri == (*C).ult)
            IniciaC(C);
        else
            (*C).pri +=1;
    }
}

TElementoC consultaC (TCola C){
    if (C.pri !=-1)
        return C.datos[C.pri];
}

*****************************************IMPLEMENTACION COLA CIRCULAR ESTATICA******************************************************
#include "colas.h"

void IniciaC (TCola *C) {
    (*C).pri=-1;
    (*C).ult=-1;
}

int VaciaC(TCola C){
    return C.pri==-1;
}

TElementoC consultaC (TCola C){
    if (C.pri !=-1)
        return C.datos[C.pri];
}

void poneC (TCola *C, TElementoC X) {
    if (!(((*C).ult==49 && (*C).pri==0) || ((*C).ult+1==(*C).pri))) {
        if ((*C).pri==-1){
            (*C).pri = 0;
            (*C).ult = 0;
        }
        else
            if ((*C).ult == 49)
                (*C).ult = 0;
            else
                (*C).ult += 1;
        (*C).datos[(*C).ult]=X;
    }
}

void sacaC (TCola *C, TElementoC *X) {
    if ((*C).pri != -1) {
        *X = (*C).datos[(*C).pri];
        if ((*C).pri == (*C).ult)
            IniciaC(C);
        else
            if ((*C).pri == 49)
                (*C).pri = 0;
            else
                (*C).pri += 1;
    }
}

*******************************************CABECERAS COLAS DINAMICAS*****************************************************
typedef int TElementoC;

typedef struct nodo {
    TElementoC dato;
    struct nodo * sig;} nodo;

typedef struct {
    nodo *pri, *ult;} TCola;

void IniciaC (TCola * C);

int VaciaC (TCola C);

TElementoC consultaC (TCola C);

void sacaC (TCola *C, TElementoC* x);

void poneC (TCola *C, TElementoC x);

******************************************IMPLEMENTACION COLAS DINAMICAS**************************************************

#include "colas.h"
#include <stdlib.h>

void IniciaC (TCola *C){
    (*C).pri=NULL;
    (*C).ult=NULL;
}

int VaciaC(TCola C){
    return C.pri==NULL;
}

void poneC (TCola *C, TElementoC X) {
    nodo * aux;
    aux = (nodo *) malloc (sizeof(nodo));
    aux->dato = X;
    aux->sig = NULL;
    if ((*C).pri==NULL)
        (*C).pri=aux;
    else
        (*C).ult->sig=aux;
    (*C).ult=aux;
}

void sacaC (TCola *C, TElementoC *X){
    nodo * aux;
    if ((*C).pri !=NULL) {
        aux = (*C).pri;
        *X = aux->dato;
        (*C).pri = (*C).pri->sig;
        if ((*C).pri == NULL)
            (*C).ult = NULL;
        free(aux);
    }
}

TElementoC consultaC (TCola C){
    if (C.pri !=NULL)
        return C.pri-> dato;
}
